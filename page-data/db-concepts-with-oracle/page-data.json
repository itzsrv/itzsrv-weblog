{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-post-js","path":"/db-concepts-with-oracle/","result":{"data":{"mdx":{"id":"2b25a781-1114-5983-a2ba-9a530b9c3e30","excerpt":"What is Database Schema? In its true sense, it defines any kind of structure that we are defining around the data. This could include tablesâ€¦","frontmatter":{"title":"Database Concepts and Oracle DB Terminologies","date":"2020-09-05T00:00:00.000Z","description":"Everything you need to know to work on a Database","tags":["post","database"],"cover":null},"fields":{"slug":"/db-concepts-with-oracle/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Database Concepts and Oracle DB Terminologies\",\n  \"cover\": null,\n  \"date\": \"2020-09-05T00:00:00.000Z\",\n  \"description\": \"Everything you need to know to work on a Database\",\n  \"tags\": [\"post\", \"database\"],\n  \"draft\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h4\", {\n    \"id\": \"what-is-database-schema\"\n  }, \"What is Database Schema?\"), mdx(\"p\", null, \"In its true sense, it defines any kind of structure that we are defining around the data. This could include tables, views, fields, relationships, packages, procedures, indexes, functions, types, sequences, materialized views, queues, triggers, synonyms, database links, directories, xml schemas and other elements. A database generally stores its schema in a data dictionary.\"), mdx(\"p\", null, \"This structure helps us in understanding the data, that would otherwise take up a lot of time and efforts in finding the head and tail of the data. This structure and its corresponding data relationship is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Schema\"), \" of the database.\"), mdx(\"p\", null, \"The application of this structure is something that is specific to Database Vendors. For example, there are unstructured data stores which apply schema only when the data is read. In other words, data lives in juggled state, and we apply the structure to the query code, called as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Schema On Read\"), \". On the otherhand there are Databases which force structure as a condition before data gets written, called as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Schema On Write\"), \".\"), mdx(\"p\", null, \"The method of how a schema gets designed can influence different behaviours in a database, for example if a database schema is designed as a series of tables connected by primary keys, then it is likely something designed for reading and writing singular records which is ideal for applications focused on transaction-oriented tasks also known as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Online Transactional Processing (OLTP)\"), \".\"), mdx(\"p\", null, \"However, if a schema has a central table connected to keys supplied by surrounding tables then it's likely to be something designed to make read output highly efficient. This kind of schema is efficient for high scale information delivery, called as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"star schema\"), \".\"), mdx(\"p\", null, \"When we are interacting with data, the schema of the data becomes important topic. A good schema can mean the difference between a query lasting a few seconds to a query lasting many hours.\"), mdx(\"p\", null, \"But Oracle uses the term schema slightly differently in its databases from what it generally means. As mentioned on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/database/121/CNCPT/intro.htm#CNCPT939\"\n  }), \"Oracle Docs\"), \", an oracle schema is always associated with a user and it is a named collection of database objects, including logical structures such as tables and indexes belonging to the user. It has the same name as the database user who owns it. Simply put, there is one schema per user.\"), mdx(\"h4\", {\n    \"id\": \"what-is-database-user\"\n  }, \"What is Database User?\"), mdx(\"p\", null, \"The account that is created and used to connect to a database is called User. The database contains all the users you've created, and their data (and a bunch of predefined system users, tables, views, etc. which make the whole thing work).\"), mdx(\"p\", null, \"You create users with the create user statement. This also \\\"creates\\\" the schema (initially empty) - you cannot create a schema as such, it is tied to the user. Once the user is created, an administrator can grant privileges to the user, which will enable it to create tables, execute select queries, insert, and everything else.\\nYou can create a database with the create database statement, once you've installed the Oracle software stack.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE USER\"), \" command creates a user. It also automatically creates a schema for that user.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CREATE SCHEMA\"), \" command does not create a \\\"schema\\\" as it implies, it just allows you to create multiple tables and views and perform multiple grants in your own schema in a single transaction.\"))), mdx(\"p\", null, \"Furthermore, a user can access objects in schemas other than their own, if they have permission to do so.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Think of a user as you normally do (username/password with access to log in and access some objects in the system) and a schema as the database version of a user's home directory. User \\\"foo\\\" generally creates things under schema \\\"foo\\\" for example, if user \\\"foo\\\" creates or refers to table \\\"bar\\\" then Oracle will assume that the user means \\\"foo.bar\\\".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The Hierarchy in Oracle vs MS SQL Server\")), mdx(\"p\", null, \"Oracle : Database > User > Schema > Table\"), mdx(\"p\", null, \"MS SQL : Instance > Database > Schema > Table\"), mdx(\"p\", null, \"An example that shows how a user can access objects in schemas other than their own:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SQL> conn b/b\\nConnected.\\nSQL> select * from my_tab\\n2 /\\nOBJECT_ID OBJECT_NAME\\n---------- ------------------------------\\n80116 BIG_PK\\n80114 BIG_TABLE\\n45709 BP\\n45710 BP_PK\\n\\nSQL> grant select on my_tab to a\\n2 /\\n\\nGrant succeeded.\\n\\nSQL> conn a/a\\nConnected.\\nSQL> select * from my_tab\\n2 /\\nOBJECT_ID OBJECT_NAME\\n---------- ------------------------------\\n80404 ACTOR\\n80414 ACTOR_NT\\n45707 AP\\n45708 AP_PK\\n52765 ASSIGNMENT\\n49747 A_ID\\n52768 A_OBJTYP\\n\\n7 rows selected.\\n\\nSQL> alter session set current_schema=b\\n2 /\\n\\nSession altered.\\n\\nSQL> select * from my_tab\\n2 /\\nOBJECT_ID OBJECT_NAME\\n---------- ------------------------------\\n80116 BIG_PK\\n80114 BIG_TABLE\\n45709 BP\\n45710 BP_PK\\n\\nSQL> select username, schemaname\\n2 from v$session\\n3 where sid in (select sid from v$mystat)\\n4 /\\nUSERNAME SCHEMANAME\\n--------- -----------\\nA B\\n\\nSQL>\\n\")), mdx(\"p\", null, \"Another example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SQL> conn u2/u2\\nConnected.\\nSQL> select table_name from user_tables\\n  2  /\\nTABLE_NAME\\n------------------------------\\nT1\\nT2\\nT3\\n\\nSQL> select * from t1\\n  2  /\\n      COL1 COL2\\n---------- ----------\\n         1 BBBBBBBBBB\\n\\nSQL> grant select on t1 to u1\\n  2  /\\n\\nGrant succeeded.\\n\\nSQL> conn u1/u1\\nConnected.\\nSQL> select table_name from user_tables\\n  2  /\\nTABLE_NAME\\n------------------------------\\nT1\\nT2\\n\\nSQL> select * from t1\\n  2  /\\n      COL1 COL2\\n---------- ----------\\n         1 AAAAAAAAAA\\n\\nSQL> alter session set current_schema=U2\\n  2  /\\n\\nSession altered.\\n\\nSQL> select * from t1\\n  2  /\\n      COL1 COL2\\n---------- ----------\\n         1 BBBBBBBBBB\\n\\nSQL> select * from t2\\n  2  /\\nselect * from t2\\n              *\\nERROR at line 1:\\nORA-00942: table or view does not exist\\n\\n\\nSQL> select * from u1.t2\\n  2  /\\n\\nno rows selected\\n\\nSQL> select table_name from user_tables\\n  2  /\\nTABLE_NAME\\n------------------------------\\nT1\\nT2\\n\\nSQL>\\n\")), mdx(\"hr\", null), mdx(\"h4\", {\n    \"id\": \"what-are-database-objects\"\n  }, \"What are Database Objects?\"), mdx(\"p\", null, \"Oracle Database recognizes objects that are associated with a particular schema and objects that are not associated with a particular schema, as described in the sections that follow.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Schema Objects\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  A schema is a collection of logical structures of data, or schema objects. A schema is owned by a database user and has the same name as that user. Each user owns a single schema. Schema objects can be created and manipulated with SQL and include the following types of objects:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Clusters\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Constraints\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Database links\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Database triggers\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Dimensions\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"External procedure libraries\\nIndex-organized tables\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Indexes\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Indextypes\\nJava classes, Java resources, Java sources\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Materialized views\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Materialized view logs\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Object tables\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Object types\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Object views\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Operators\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Packages\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Sequences\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Stored functions, stored procedures\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Synonyms\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tables\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Views\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Nonschema Objects\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Other types of objects are also stored in the database and can be created and manipulated with SQL but are not contained in a schema:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Contexts\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Directories\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Parameter files (PFILEs) and server parameter files (SPFILEs)\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Profiles\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Roles\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Rollback segments\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Tablespaces\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Users\"))), mdx(\"blockquote\", null, mdx(\"h5\", _extends({\n    parentName: \"blockquote\"\n  }, {\n    \"id\": \"references\"\n  }), \"References:\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.oracle.com/database/121/CNCPT/intro.htm#CNCPT939\"\n  }), \"Orcale Documentations\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Few More Important Resources that can be checked out:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/database/121/CNCPT/glossary.htm#CNCPT89131\"\n  }), \"Oracle Glossary\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.oracle.com/cd/B19306_01/server.102/b14200/sql_elements007.htm\"\n  }), \"Database Objects\")))))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2b25a781-1114-5983-a2ba-9a530b9c3e30"}}}