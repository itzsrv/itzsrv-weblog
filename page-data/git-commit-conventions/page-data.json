{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-post-js","path":"/git-commit-conventions/","result":{"data":{"mdx":{"id":"77df735e-b3b7-59d4-a593-013eced26ad6","excerpt":"Following a convention for writing Git commit messages makes it easy for fellow contributors to understand, and navigating through gitâ€¦","frontmatter":{"title":"Message Conventions for Git Commits","date":"2020-05-30T00:00:00.000Z","description":null,"tags":["post"],"cover":null},"fields":{"slug":"/git-commit-conventions/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Message Conventions for Git Commits\",\n  \"date\": \"2020-05-30T00:00:00.000Z\",\n  \"tags\": [\"post\"],\n  \"draft\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Following a convention for writing Git commit messages makes it easy for fellow contributors to understand, and navigating through git history becomes simple (for an example, ignoring all style changes).\"), mdx(\"p\", null, \"Format of the commit message:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<type>[optional scope]: <subject>\\n\\n[optional body]\\n\\n[optional footer(s)]\\n\")), mdx(\"p\", null, \"For an example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-git\"\n  }), \"feat: add page travel\\n^--^ ^--------------^\\n|    |\\n|    +-> subject in present tense.\\n|\\n+-------> Type: chore, docs, feat, fix, refactor, style, or test.\\n\")), mdx(\"p\", null, \"Allowed type values:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"feat: (new feature for the user, not a new feature for build script)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"fix: (bug fix for the user, not a fix to a build script)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"docs: (changes to the documentation)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"style: (formatting, missing semi colons, etc; no production code change)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"refactor: (refactoring production code, eg. renaming a variable)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"test: (adding missing tests, refactoring tests; no production code change)\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"chore: (updating grunt tasks etc; no production code change)\")), mdx(\"p\", null, \"Example scope values:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"init\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"runner\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"watcher\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"config\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"web-server\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"proxy\")), mdx(\"p\", null, \"The scope can be empty (e.g. if the change is a global or difficult to assign to a single component), in that case the parentheses are omitted.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"77df735e-b3b7-59d4-a593-013eced26ad6"}}}