{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-post-js","path":"/linux-terminal-tips/","result":{"data":{"mdx":{"id":"116a3d1e-6434-53f4-bab8-c6c0bddc72ae","excerpt":"At times, while using Linux Terminals, we get stuck over steps where either we don't remember exactly which command can help us out fromâ€¦","frontmatter":{"title":"Linux Terminal Tips for Dev","date":"2020-05-24T00:00:00.000Z","description":"Tips to enhance productivity while using Linux Terminals","tags":["post"],"cover":null},"fields":{"slug":"/linux-terminal-tips/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linux Terminal Tips for Dev\",\n  \"date\": \"2020-05-24T00:00:00.000Z\",\n  \"description\": \"Tips to enhance productivity while using Linux Terminals\",\n  \"tags\": [\"post\"],\n  \"draft\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At times, while using Linux Terminals, we get stuck over steps where either we don't remember exactly which command can help us out from that point or the one we know forces us take a long route to achieve what we needed. Here, we will see few tips and tricks to overcome some of those difficult times. The examples shown below are being run in bash shell on mac, but you can try them in other shells as well.\"), mdx(\"h2\", {\n    \"id\": \"short-cuts\"\n  }, \"Short-cuts\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + a\"))), mdx(\"p\", null, \"If you have typed a long command in your terminal and your cursor currently is at the end of the command but you want to navigate your cursor to the start of the command, you can use it. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ find ~/Docs/GitHub/learn -type d -name file|\\n$ |find ~/Docs/GitHub/learn -type d -name file\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + e\"))), mdx(\"p\", null, \"If you have typed a long command in your terminal and your cursor currently is somewhere but not at the end of the command, now if you want to navigate your cursor to the end of the command, you can use this command.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ |find ~/Docs/GitHub/learn -type d -name file\\n$ find ~/Docs/GitHub/learn -type d -name file|\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"option + left/right arrow\"))), mdx(\"p\", null, \"If you have typed a long command in your terminal and you want to navigate your cursor word by word of the command, you can use this command.  \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + k\"))), mdx(\"p\", null, \"If you have typed a long command in your terminal and you want to delete some part from a point untill the end of the command, then navigate your cursor to that point, and you can use this command.  \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + u\"))), mdx(\"p\", null, \"If you have typed a long command in your terminal and you want to delete some part from a point untill the beginning of the command, navigate your cursor to that point, and you can use this command. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"!<command initials>\"))), mdx(\"p\", null, \"If you want to rerun any command that you have run recently without finding that command in your history through up and down arrow keys, then you can simply use the first few initials of that command with exclamation sign : \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!fi\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ !fi\\nfind ~/Docs/GitHub/learn -type d -name '*-2'\\n\")), mdx(\"p\", null, \"Shell starts looking your history and the first command that it finds mathing with that initials, it runs it for you. \"), mdx(\"p\", null, \"Same can be achieved by giving the history number with the exclamation sign\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ history\\n192  brew cask list   \\n193  brew uninstall virtualbox\\n\\n$ !192\\n\")), mdx(\"p\", null, \"Shell runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew cask list\"), \", as soon as you hit enter.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + r\"))), mdx(\"p\", null, \"If you want to interactively search for a command from your history, you can use this command. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"(reverse-i-search)`fi': find ~/Docs/GitHub/learn -type d -name file\\n\")), mdx(\"p\", null, \"You can start looking for your command by typing the initials, and as soon you find your command to run, hit enter!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"ctrl + l\"))), mdx(\"p\", null, \"If you want to clear the screen, you can use this command. But it doesnt clear the scroll back, so you can scroll up and down to see your previous command outputs.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"command + k\"))), mdx(\"p\", null, \"If you want to clear the screen as well as the scroll back, you can use this command.\"), mdx(\"hr\", null), mdx(\"h4\", {\n    \"id\": \"resize-multiple-images\"\n  }, \"Resize multiple images\"), mdx(\"p\", null, \"We often feel the need to resize images for various purposes. Like we as web developers, resize images to small or medium pixels alot. Its painful to go to each picture and resize it one by one from GUI Applications. Here, we will see how to achieve the same from terminal. Before going further, copy all the original images to another directory and navigate into that directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sips -Z 640 *.jpg\\n\")), mdx(\"p\", null, \"All the jpg images present inside this directory are resized to 640 pixels with same aspect ratio as original images.\"), mdx(\"p\", null, \"-Z : to maintain the aspect ratio\"), mdx(\"p\", null, \"640 : to resize to 640 pixels\"), mdx(\"p\", null, \"The output directory can be defined by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--out\"), \" option.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sips -Z 640 *.jpg --out ~/Desktop/Project/small\\n\")), mdx(\"p\", null, \"The images inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" directory will have the same name as the original files. If you want to append the file name with some keyword, you can use below command\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"find . -type f -exec bash -c 'mv \\\"$0\\\" \\\"${0%\\\\.jpg}-300.jpg\\\"' {} \\\\;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"116a3d1e-6434-53f4-bab8-c6c0bddc72ae"}}}